scriptencoding utf-8
set shell=/bin/zsh
" ==============================================================================
" Fity's vimrc, use vim-plug to mantain plugins
" Blog: http://fity.me
" Github: https://github.com/fity
" Mail: imfity@gmail.com
" ==============================================================================

" global settings
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set ambiwidth=double
set lbr
set fo+=mb
set fileformat=unix
" set list
" set listchars=tab:>-,trail:-
" ignore introduction messages
set shortmess=I
set nobackup
set noswapfile
set history=1024
set backspace=2
set autoread
" contact with system clipboard
set clipboard=unnamed
" set the working path to the path of the current file
set autochdir

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" global general key mappings
let mapleader = ','
let maplocalleader='\'
map ; :
cnoremap w!! w !sudo tee % >/dev/null
" shortcuts for maintaining vimrc
nnoremap <silent> <Leader>ve :tabedit $MYVIMRC<CR>
nnoremap <silent> <Leader>vs :source $MYVIMRC<CR>

" plug settings
call plug#begin('~/.vim/bundle')
" my plugins
" theme and appearance
Plug 'tomasr/molokai'
" gui only
Plug 'mitsuhiko/fruity-vim-colorscheme'
" a port from gui only to term compatible, not really nice
" Plug 's0undt3ch/fruity-vim-colorscheme'
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
" needed for vim-airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
Plug 'airblade/vim-gitgutter'
autocmd InsertEnter *.json setlocal concealcursor=
autocmd InsertLeave *.json setlocal concealcursor=inc
Plug 'Yggdroot/indentLine'
let g:indent_guides_guide_size=1
let g:indentLine_char = 'Â¦'

" Plug 'junegunn/vim-easy-align'
" " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
" vmap <Enter> <Plug>(EasyAlign)
" " Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign)
" " vmap <Leader>a <Plug>(EasyAlign)
" " nmap <Leader>a <Plug>(EasyAlign)
" if !exists('g:easy_align_delimiters')
  " let g:easy_align_delimiters = {}
" endif
" let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }

Plug 'mhinz/vim-startify'
Plug 'tmhedberg/SimpylFold'
autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
" show doc string for folded code
" let g:SimpylFold_docstring_preview=1

Plug 'kshenoy/vim-signature'

" ============================================================
" text editing related
Plug 'Lokaltog/vim-easymotion'
if has("gui_running")
    " fix serach in MacVIM "+gP
    " for the same reason, use <c-\> to insert content in ctrlP
    autocmd BufWinEnter * :EMCommandLineNoreMap \"\+gP <C-r>+
endif
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
" easymotion line motion
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0
let g:EasyMotion_smartcase = 1

Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

Plug 'tpope/vim-surround'
Plug 'michaeljsmith/vim-indent-object'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
" close vim if the only window left open is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeMinimalUI = 1
" default to 1, use +/- if set to 0
let NERDTreeDirArrows = 1
" show hidden files in nerdtree, use I to switch in nerdtree window
" let NERDTreeShowHidden=1
" nerdcommenter option, use 2 space between code and its comments
let g:NERDSpaceDelims = 2
let g:NERDTreeIgnore = ['\.pyc$', '\.o$', '\.exe$', '\.a$']
nmap <Leader>e :NERDTreeTabsToggle<CR>
" let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_open_on_gui_startup=0
let g:gitgutter_max_signs = 1024 " default 500
let g:NERDTreeWinSize=20

" ============================================================
" general coding related
Plug 'kien/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_follow_symlinks=1
nnoremap <Leader>f :CtrlPBufTag<CR>
" nnoremap <Leader>r :CtrlPTag<CR>
Plug 'majutsushi/tagbar'
nnoremap <leader>t :TagbarToggle<CR>

Plug 'scrooloose/nerdcommenter'
Plug 'ntpeters/vim-better-whitespace'
" let g:better_whitespace_filetypes_blacklist=['mkd', 'tex']
" autocmd BufWritePre <buffer> StripWhitespace
autocmd FileType python autocmd BufWritePre <buffer> StripWhitespace
" Plug 'kien/rainbow_parentheses.vim'
" " Better Rainbow Parentheses configurations
" let g:rbpt_colorpairs = [
    " \ ['brown',       'RoyalBlue3'],
    " \ ['Darkblue',    'SeaGreen3'],
    " \ ['darkgray',    'DarkOrchid3'],
    " \ ['darkgreen',   'firebrick3'],
    " \ ['darkcyan',    'RoyalBlue3'],
    " \ ['darkred',     'SeaGreen3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['brown',       'firebrick3'],
    " \ ['gray',        'RoyalBlue3'],
    " \ ['black',       'SeaGreen3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['Darkblue',    'firebrick3'],
    " \ ['darkgreen',   'RoyalBlue3'],
    " \ ['darkcyan',    'SeaGreen3'],
    " \ ['darkred',     'DarkOrchid3'],
    " \ ['red',         'firebrick3'],
    " \ ]
" let g:rbpt_max = 16
" let g:rbpt_loadcmd_toggle = 0
" augroup rainbow_group
    " autocmd VimEnter * RainbowParenthesesToggle
    " autocmd Syntax * RainbowParenthesesLoadRound
    " autocmd Syntax * RainbowParenthesesLoadSquare
" augroup end

Plug 'tpope/vim-fugitive'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer' }
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_key_invoke_completion = ''
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_goto_buffer_command = 'new-or-existing-tab' " use h g:ycm_goto_buffer_command for help
" keep error log files
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
"let g:ycm_autoclose_preview_window_after_insertion = 1
" nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>G :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>r :YcmCompleter GoToReferences<CR>

Plug 'scrooloose/syntastic'
let g:syntastic_ignore_files=[".*\.tex$"]
" let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_python_checkers=['flake8']
" E501 -> line too long; E225 -> no white spaces between operation
let g:syntastic_python_flake8_args='--ignore=E501,E225,W391,E123'

" engine
Plug 'SirVer/ultisnips'
" real snippets
Plug 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<leader>x"
" let g:UltiSnipsJumpForwardTrigger="<leader>n"
" let g:UltiSnipsJumpBackwardTrigger="<leader>p"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit = 'vertical'


" ============================================================
" specific coding related
Plug 'hynek/vim-python-pep8-indent'
Plug 'fs111/pydoc.vim'
" let g:pydoc_open_cmd = 'tabnew'
let g:pydoc_open_cmd = 'vsplit'
" function! MyPydoc()
    " let current_word = expand("<cword>")
    " echom current_word
    " execute 'silent Pydoc' current_word
" endfunction
function! MyPydoc(query)
    execute 'silent Pydoc' a:query
endfunction
nnoremap <localleader>d :call MyPydoc(expand("<cword>")) <CR>
vnoremap <localleader>d :call MyPydoc(expand("<cword>")) <CR>

" Python arg style parse
Plug 'FooSoft/vim-argwrap', {'for': 'python'}
nnoremap <silent> <leader>a :ArgWrap<CR>

" web frontend related
Plug 'mattn/emmet-vim'
" only enable emmet in normal mode
" let g:user_emmet_mode='n'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
autocmd FileType html,css,js :set shiftwidth=2

Plug 'fatih/vim-go'


" ============================================================
" syntax files
" Plug 'mitsuhiko/vim-rst'
Plug 'solarnz/thrift.vim'
" Plug 'tpope/vim-markdown'
Plug 'jtratner/vim-flavored-markdown'
let vim_markdown_initial_foldlevel=99
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END
" a better Python syntax file
Plug 'mitsuhiko/vim-python-combined'
" python syntax file settings
let python_highlight_all = 1
let python_folding = 1

Plug 'mitsuhiko/vim-jinja'
let g:htmljinja_disable_detection=1
let g:htmljinja_disable_html_upgrade=1
Plug 'dag/vim-fish'

" Python virtualenv support
Plug 'jmcantrell/vim-virtualenv'

" ============================================================
" extra
" Plug 'vimwiki/vimwiki'
" vimwiki options
" let g:vimwiki_menu = ''
" let g:vimwiki_list = [{'path': '~/vimwiki/wiki', 'path_html': '~/vimwiki/wiki/html', 'syntax': 'markdown', 'ext': '.md'}]

Plug 'parkr/vim-jekyll'
let g:jekyll_post_extension = '.md'
" vim-jekyll configurations
" Working time tracking tool, config is ~/.wakatime.cfg
Plug 'wakatime/vim-wakatime'
" not used now
" Plugin 'tacahiroy/ctrlp-funky'
Plug 'terryma/vim-multiple-cursors'
" Bundle 'sjl/gundo.vim'
" Plugin 'godlygeek/tabular'

" local plugin
" Manage TODOs in  the source code
" Plug '~/codepad/vim-todo'
call plug#end()

" theme setting
set background=dark
let g:solarized_termcolors=256
if has("gui_running")
    " remove toolbar
    set guioptions-=T
    " remove buffer scrollbar
    set guioptions-=r
    " remove nerdtree scrollbar
    set guioptions-=L

    colorscheme fruity
    if has("mac")
        set guifont=Monaco:h14
        set fuoptions=maxvert,maxhorz
        " does not work properly on os x
        " au GUIEnter * set fullscreen
    else
        set guifont=DejaVu\ Sans\ Mono\ 15
    endif

else
    colorscheme solarized
endif
" toggle between number and relative number on ,l
set number
" nnoremap <localleader>l :call ToggleRelativeAbsoluteNumber()<CR>
" function! ToggleRelativeAbsoluteNumber()
  " if &number
    " set relativenumber
    " set nonumber
  " else
    " set number
    " set norelativenumber
  " endif
" endfunction
" Height of the command bar
" set cmdheight=2

set wildmenu
" set wildmode=list:full
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,.git\*,.hg\*,.svn\*
" set textwidth=79
set modeline
set hidden
" enable automatic title setting for terminals
set title
set titleold="Terminal"
set titlestring=%F
" set spell
set incsearch
set ignorecase
set smartcase
" set hlsearch
set nohlsearch
set showcmd
set showmatch
runtime macros/matchit.vim

" set list
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab

" highlight the max column limit
set colorcolumn=80
set cursorline
" set cursorcolumn

set foldmethod=syntax
set foldlevel=1
" ignore number format(0x9 will not be treat as hex, nor do the 07 as octal
"set nrformats=
"set pastetoggle=<f5>

"vim command line config
cnoremap <C-a>  <Home>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Delete>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

" window and tab navigating shortcuts
nnoremap <S-H> gT
nnoremap <S-L> gt
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-l> <C-W>l
nnoremap <localleader>t <C-W><S-T>

" coding prefered settings
set autoindent
set smartindent
filetype on
filetype plugin on
filetype plugin indent on
filetype indent on
" auto complement related
set infercase

" options when edit the crontab file
if $VIM_CRONTAB == "true"
    set nobackup
    set nowritebackup
endif

" user defined autogroups
augroup make_group
    autocmd FileType make set noexpandtab
augroup end

augroup markdown_preview
    autocmd!
    autocmd FileType markdown,mkd map <Leader>p :!open -a /Applications/Google\ Chrome.app/ "%:p" <CR>
augroup end

" What dose these lines do?
autocmd BufReadPost *
    \ if line("'\"")>0&&line("'\"")<=line("$") |
    \   exe "normal g'\"" |
    \ endif


"================================================================
" file type related auto runner, use F5 to run the current file
"================================================================
autocmd FileType python nmap <F5> :!python %<CR>
autocmd FileType go nmap <F5> :GoRun %<CR>


" json formater
" command! FormatJson :%!python -m json.tool
" Format Json String with unicode support
command! FormatJson :%!python -c "import json,sys,codecs; json.dump(json.load(codecs.getreader('utf8')(sys.stdin)), codecs.getwriter('utf8')(sys.stdout), sort_keys=True, indent=4, separators=(',', ': '), ensure_ascii=False)"
" format python code using yapf, config file is ~/.style.yapf
command! FormatPython :%!yapf
